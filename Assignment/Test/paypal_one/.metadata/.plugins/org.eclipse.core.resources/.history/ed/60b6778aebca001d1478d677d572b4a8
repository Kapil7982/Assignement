package com.paypal.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.paypal.exceptions.ResourceNotFoundException;
import com.paypal.models.Sprint;
import com.paypal.repo.SprintRepository;

@RestController
@RequestMapping("/sprints")
public class SprintController {
    @Autowired
    private SprintRepository sprintRepository;
    
    @GetMapping
    public List<Sprint> getAllSprints() {
        return sprintRepository.findAll();
    }
    
    @GetMapping("/{id}")
    public Sprint getSprintById(@PathVariable Long id) {
        return sprintRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Sprint not found with id " + id));
    }
    
    @PostMapping("")
    public Sprint createSprint(@RequestBody Sprint sprint) {
        return sprintRepository.save(sprint);
    }
    
    @PutMapping("/{id}")
    public Sprint updateSprint(@PathVariable Long id, @RequestBody Sprint sprintDetails) {
        Sprint sprint = sprintRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Sprint not found with id " + id));
        
        sprint.setName(sprintDetails.getName());
        sprint.setDescription(sprintDetails.getDescription());
        
        return sprintRepository.save(sprint);
    }
    
    @DeleteMapping("/{id}")
    public ResponseEntity<?> deleteSprint(@PathVariable Long id) {
        Sprint sprint = sprintRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Sprint not found with id " + id));
        
        sprintRepository.delete(sprint);
        
        return ResponseEntity.ok().build();
    }
}
